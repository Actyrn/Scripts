local esp = {
	enabled = false, 

	fading = false, 
	fadingspeed = 5, 

	box = false, 
	boxcolor = Color3.fromRGB(255, 255, 255), 
	boxoutline = Color3.fromRGB(0, 0, 0), 
	boxtransparency = 0, 
	boxoutlinetransparency = 0, 

	health = false, 
	healthcolor = Color3.fromRGB(135, 225, 110), 
	healthoutline = Color3.fromRGB(0, 0, 0), 
	healthtransparency = 0, 
	healthoutlinetransparency = 0, 

	chams = false, 
	chamscolor = Color3.fromRGB(255, 255, 255), 
	chamsoutline = Color3.fromRGB(0, 0, 0), 
	chamstransparencyinline = 0, 
	chamstransparencyoutline = 0, 

	name = false, 
	namecolor = Color3.fromRGB(255, 255, 255), 
	nameoutline = Color3.fromRGB(0, 0, 0), 
	nametransparency = 0, 

	distance = false, 

	healthbartext = false, 
	healthbartextcolor = Color3.fromRGB(255, 255, 255), 
	healthbartextoutline = Color3.fromRGB(0, 0, 0), 
	healthbartexttransparency = 0, 

	renderdistance = math.huge, 
	players = {}
}

local camera = workspace.CurrentCamera
local players = game:GetService("Players")
local localplayer = players.LocalPlayer

local draw = {
	currDrawings = {}
}

function draw.new(object, properties): new_drawing
	local object = Drawing.new(object)
	for i, v in next, properties do
		object[i] = v
	end
	table.insert(draw.currDrawings, object)
	return object
end

game:GetService("RunService").RenderStepped:Connect(function()
	for i, v in next, players:GetPlayers() do
		if v ~= localplayer and v.Character then
			local drawingInstances = esp.players[v]
			if not drawingInstances then continue end

			if esp.enabled then
				local character = v.Character
				local _, onscreen = camera:WorldToScreenPoint(character.HumanoidRootPart.Position)
				local distfromchar = (camera.CFrame.Position - v.Character.HumanoidRootPart.Position).Magnitude
				if esp.renderdistance < distfromchar then 
					drawingInstances.Box.Visible = false
					drawingInstances.BoxOutline.Visible = false
					drawingInstances.Health.Visible = false
					drawingInstances.HealthOutline.Visible = false
					drawingInstances.Cham.Parent = nil
					drawingInstances.Name.Visible = false
					drawingInstances.HealthText.Visible = false
				else
					if onscreen then
						local charhum2D = camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
						local charSize = (camera:WorldToViewportPoint(character.HumanoidRootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(character.HumanoidRootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
						local boxSize = Vector2.new(math.floor(charSize * 1.1), math.floor(charSize * 1.9))
						local boxPosition = Vector2.new(math.floor(charhum2D.X - charSize * 1.1 / 2), math.floor(charhum2D.Y - charSize * 1.6 / 2))

						if esp.box then
							drawingInstances.Box.Size = boxSize
							drawingInstances.Box.Position = boxPosition
							drawingInstances.Box.Visible = true
							drawingInstances.Box.Color = esp.boxcolor
							drawingInstances.BoxOutline.Size = boxSize
							drawingInstances.BoxOutline.Position = boxPosition
							drawingInstances.BoxOutline.Visible = true
							drawingInstances.BoxOutline.Color = esp.boxoutline
							if esp.fading then
								drawingInstances.Box.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
								drawingInstances.BoxOutline.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
							else
								drawingInstances.Box.Transparency = 1 - esp.boxtransparency
								drawingInstances.BoxOutline.Transparency = 1 - esp.boxoutlinetransparency
							end
						else
							drawingInstances.Box.Visible = false
							drawingInstances.BoxOutline.Visible = false
						end
						if esp.health then
							drawingInstances.Health.From = Vector2.new((boxPosition.X - 5), boxPosition.Y + boxSize.Y)
							drawingInstances.Health.To = Vector2.new(drawingInstances.Health.From.X, drawingInstances.Health.From.Y - (character.Humanoid.Health / character.Humanoid.MaxHealth) * boxSize.Y)
							drawingInstances.Health.Color = esp.healthcolor
							drawingInstances.Health.Visible = true

							drawingInstances.HealthOutline.From = Vector2.new(drawingInstances.Health.From.X, boxPosition.Y + boxSize.Y + 1)
							drawingInstances.HealthOutline.To = Vector2.new(drawingInstances.Health.From.X, (drawingInstances.Health.From.Y - 1 * boxSize.Y) -1)
							drawingInstances.HealthOutline.Color = esp.healthoutline
							drawingInstances.HealthOutline.Visible = true

							if esp.fading then
								drawingInstances.Health.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
								drawingInstances.HealthOutline.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
							else
								drawingInstances.Health.Transparency = 1 - esp.healthtransparency
								drawingInstances.HealthOutline.Transparency = 1 - esp.healthoutlinetransparency
							end
							if esp.healthbartext then
								drawingInstances.HealthText.Visible = true
								drawingInstances.HealthText.Text = math.round(character.Humanoid.Health) .. "%"
								drawingInstances.HealthText.Position = Vector2.new(drawingInstances.Health.From.X - 15, drawingInstances.Health.From.Y - (character.Humanoid.Health / character.Humanoid.MaxHealth) * boxSize.Y)
								drawingInstances.HealthText.Color = esp.healthbartextcolor
								drawingInstances.HealthText.OutlineColor = esp.healthbartextoutline
								drawingInstances.HealthText.Font = Drawing.Fonts.Plex
								if esp.fading then
									drawingInstances.HealthText.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
								else
									drawingInstances.HealthText.Transparency = 1 - esp.healthbartexttransparency
								end
							else
								drawingInstances.HealthText.Visible = false
							end
						else
							drawingInstances.Health.Visible = false
							drawingInstances.HealthOutline.Visible = false
							drawingInstances.HealthText.Visible = false
						end
						if esp.chams then
							drawingInstances.Cham.Parent = character
							drawingInstances.Cham.FillColor = esp.chamscolor
							drawingInstances.Cham.OutlineColor = esp.chamsoutline
							if esp.fading then
								drawingInstances.Cham.FillTransparency = (math.sin(tick() * esp.fadingspeed) + 1) / 2
								drawingInstances.Cham.OutlineTransparency = (math.sin(tick() * esp.fadingspeed) + 1) / 2
							else
								drawingInstances.Cham.FillTransparency = esp.chamstransparencyinline
								drawingInstances.Cham.OutlineTransparency = esp.chamstransparencyoutline
							end
						else
							drawingInstances.Cham.Parent = nil
						end
						if esp.name or esp.distance then
							drawingInstances.Name.Visible = true
							if esp.distance and esp.name then
								drawingInstances.Name.Text = character.Humanoid.DisplayName .. " [" .. math.round(distfromchar) .. "m]"
							elseif esp.distance then
								drawingInstances.Name.Text = "" .. math.round(distfromchar) .. " meters away"
							elseif esp.name then
								drawingInstances.Name.Text = character.Humanoid.DisplayName
							end
							drawingInstances.Name.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 16)
							drawingInstances.Name.Color = esp.namecolor
							drawingInstances.Name.OutlineColor = esp.nameoutline
							drawingInstances.Name.Font = Drawing.Fonts.Plex
							if esp.fading then
								drawingInstances.Name.Transparency = 1 - (math.sin(tick() * esp.fadingspeed) + 1) / 2
							else
								drawingInstances.Name.Transparency = 1 - esp.nametransparency
							end
						else
							drawingInstances.Name.Visible = false
						end
					else
						drawingInstances.Box.Visible = false
						drawingInstances.BoxOutline.Visible = false
						drawingInstances.Health.Visible = false
						drawingInstances.HealthOutline.Visible = false
						drawingInstances.Cham.Parent = nil
						drawingInstances.Name.Visible = false
						drawingInstances.HealthText.Visible = false
					end
				end
			else
				drawingInstances.Box.Visible = false
				drawingInstances.BoxOutline.Visible = false
				drawingInstances.Health.Visible = false
				drawingInstances.HealthOutline.Visible = false
				drawingInstances.Cham.Parent = nil
				drawingInstances.Name.Visible = false
				drawingInstances.HealthText.Visible = false
			end
		end
	end
end)

players.PlayerAdded:Connect(function(player)
	esp.players[player] = {
		Box = draw.new("Square", {Visible = false, Filled = false, ZIndex = 999, Thickness = 1, Transparency = 1}), 
		BoxOutline = draw.new("Square", {Visible = false, Filled = false, ZIndex = 1, Color = Color3.fromRGB(0, 0, 0), Thickness = 3, Transparency = 1}), 
		Health = draw.new("Line", {Visible = false, ZIndex = 999, Thickness = 1, Color = Color3.fromRGB(0, 255, 0), Transparency = 1}), 
		HealthOutline = draw.new("Line", {Visible = false, ZIndex = 0, Thickness = 3, Color = Color3.fromRGB(0, 0, 0), Transparency = 1}), 
		Cham = Instance.new("Highlight"), 
		Name = draw.new("Text", {Visible = false, Size = 13, Center = true, Outline = true, Font = Drawing.Fonts.Plex, Color = Color3.fromRGB(255, 255, 255), Transparency = 1}), 
		HealthText = draw.new("Text", {Visible = false, Size = 13, Center = true, Outline = true, Font = Drawing.Fonts.Plex, Color = Color3.fromRGB(255, 255, 255), Transparency = 1})
	}
end)

players.PlayerRemoving:Connect(function(player)
	if esp.players[player] then
		for i, v in pairs(esp.players[player]) do
			if v then
				if v == "Cham" then
					v.Parent = nil
				else
					v:Remove()
				end
			end
		end
		esp.players[player] = nil
	end
end)

for i, v in next, players:GetPlayers() do
	if v ~= localplayer then
		esp.players[v] = {
			Box = draw.new("Square", {Visible = false, Filled = false, ZIndex = 999, Thickness = 1}), 
			BoxOutline = draw.new("Square", {Visible = false, Filled = false, ZIndex = 1, Color = Color3.fromRGB(0, 0, 0), Thickness = 3}), 
			Health = draw.new("Line", {Visible = false, ZIndex = 999, Thickness = 1, Color = Color3.fromRGB(0, 255, 0)}), 
			HealthOutline = draw.new("Line", {Visible = false, ZIndex = 0, Thickness = 3, Color = Color3.fromRGB(0, 0, 0)}), 
			Cham = Instance.new("Highlight"), 
			Name = draw.new("Text", {Visible = false, Size = 13, Center = true, Outline = true, Font = Drawing.Fonts.Plex, Color = Color3.fromRGB(255, 255, 255)}), 
			HealthText = draw.new("Text", {Visible = false, Size = 13, Center = true, Outline = true, Font = Drawing.Fonts.Plex, Color = Color3.fromRGB(255, 255, 255)})
		}
	end
end

return esp
